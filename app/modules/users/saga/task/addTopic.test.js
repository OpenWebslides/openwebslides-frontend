// @flow

import { expectSaga } from 'redux-saga-test-plan';

import { CorruptedInternalStateError } from 'errors';
import asyncRequests from 'modules/asyncRequests';
import topics from 'modules/topics';

import actions from '../../actions';

import { sagas } from '..';

describe(`addTopic`, (): void => {

  let dummyUserId: string;
  let dummyTopicId: string;
  let dummyTitle: string;
  let dummyDescription: string;

  beforeEach((): void => {
    dummyUserId = 'dummyUserId';
    dummyTopicId = 'dummyTopicId';
    dummyTitle = 'Lorem ipsum';
    dummyDescription = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';
  });

  it(`puts a topics CREATE action containing the passed title and description, then puts a users ADD_TOPIC_ID action containing the id generated by the api`, (): void => {
    const dummyAction = actions.addTopic(dummyUserId, dummyTitle, dummyDescription);

    return expectSaga(sagas.addTopic, dummyAction)
      .put(topics.actions.create(dummyTitle, dummyDescription, dummyUserId))
      .dispatch(asyncRequests.actions.setSuccess(`topics/API_POST`, { id: dummyTopicId }))
      .put(actions.addTopicId(dummyUserId, dummyTopicId))
      .run();
  });

  it(`throws a CorruptedInternalState error, when the taken action is of the wrong type or has the wrong content`, async (): Promise<mixed> => {
    const dummyAction = actions.addTopic(dummyUserId, dummyTitle, dummyDescription);

    // Suppress console.error from redux-saga $FlowFixMe
    console.error = jest.fn();
    await expect(
      expectSaga(sagas.addTopic, dummyAction)
        .put(topics.actions.create(dummyTitle, dummyDescription, dummyUserId))
        .dispatch(asyncRequests.actions.setSuccess(`topics/API_POST`, null))
        .run(),
    ).rejects.toBeInstanceOf(CorruptedInternalStateError);
  });

});
