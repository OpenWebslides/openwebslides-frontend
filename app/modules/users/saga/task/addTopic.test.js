// @flow

import { expectSaga } from 'redux-saga-test-plan';

import asyncRequests from 'modules/asyncRequests';
import topics from 'modules/topics';

import actions from '../../actions';

import { sagas } from '..';

describe(`addTopic`, (): void => {

  let dummyUserId: string;
  let dummyTopicId: string;
  let dummyTitle: string;
  let dummyDescription: string;

  let dummyCreateAsyncRequestId: string;
  let dummyCreateReturnValue: mixed;

  beforeEach((): void => {
    dummyUserId = 'dummyUserId';
    dummyTopicId = 'dummyTopicId';
    dummyTitle = 'Lorem ipsum';
    dummyDescription = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';

    dummyCreateAsyncRequestId = 'dummyCreateAsyncRequestId';
    dummyCreateReturnValue = { id: dummyTopicId };
    asyncRequests.lib.generateId = jest.fn((): string => dummyCreateAsyncRequestId);
  });

  it(`puts a topics CREATE action containing the passed title and description, then puts a users ADD_TOPIC_ID action containing the id generated by the api`, (): void => {
    const dummyAction = actions.addTopic(dummyUserId, dummyTitle, dummyDescription);

    return expectSaga(sagas.addTopic, dummyAction)
      .put.like({ action: topics.actions.create(dummyTitle, dummyDescription, dummyUserId) })
      .dispatch(asyncRequests.actions.setSuccess(dummyCreateAsyncRequestId, dummyCreateReturnValue))
      .put(actions.addTopicId(dummyUserId, dummyTopicId))
      .run();
  });

});
